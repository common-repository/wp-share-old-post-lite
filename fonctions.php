<?phprequire_once("languages/en_EN.php");define("shortClientURL", $_SERVER['HTTP_HOST']);define("longClientURL", $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);define("sop_ws_url","http://www.shareoldpost.com/ws/wsClient.php");define("sop_wbs_url","http://www.shareoldpost.com/ws");define("sop_slug","share-old-post-lite/share-old-post-lite.php");define("sop_update_url","http://www.shareoldpost.com/update/updates.php");define("sop_update_package","http://www.shareoldpost.com/update/share-old-post-lite.zip");define("sop_current_vesrion","1.2");function ___($terme){    global $terms;    if($terms[$terme])        echo $terms[$terme];    else        echo "___".$terme;}function sop_set_sharing_state($network,$state){     sop_wsClient("networkChangeStateSharing",array("network"=>$network,"state"=>$state));}function sop_get_post_to_share($idPost) {    $args = array(        'post_type' => 'attachment',        'numberposts' => null,        'post_status' => null,        'post_parent' => $idPost    );    $image="";    $attachments = get_posts($args);    if ($attachments) {        $image = $attachments[0]->guid;    }    $post = WP_Post::get_instance($idPost);    $cat=get_the_category($idPost);    $categoriePost=array();    if(count($cat)>0)    {        foreach ($cat as $categorie) {            $categoriePost[]=$categorie->cat_ID;        }    }       $categorie=  implode(",", $categoriePost);    $content=strip_tags($post->post_content);    if(strlen($content)>200)        $content=substr($content, 0, 200)."...";    else        $content=$content;    $img=($post->post_content);    $data = array(        "WpID" => $idPost,        "post_title" => $post->post_title,        "post_content" => $content,        "guid" => get_permalink( $idPost ),        "post_date" => $post->post_date,        "categorie"=>  $categorie,        "image" =>$image    );    return $data;}function sop_wsClient($oper,$dataws=null){    if(!$dataws)    {        $dataws=array();        $dataws["url"]=$_SERVER['HTTP_HOST'];    }    else        $dataws["url"]=$_SERVER['HTTP_HOST'];        $ws_url=sop_wbs_url."/wsClient.php";    $dataws=array("oper"=>$oper,"data"=>$dataws);    try    {         $request = wp_remote_post($ws_url, array('body' => array('data' => serialize($dataws))));            if (!is_wp_error($request) || wp_remote_retrieve_response_code($request) === 200)            return $request['body'];    }   catch (Exception $exc) {         sop_put_in_log("wsClient",$exc->getMessage()."\n =>".$exc->getTraceAsString());    }}function sop_getAllPosts(){    try {                $posts = get_posts(array('numberposts' => 1000));    $liste=array();    if(count($posts)>0)    {        foreach ($posts as $post) {            $idPost=$post->ID;            //$post = WP_Post::get_instance($idPost);            $post->post_title=  str_replace('"', "'", $post->post_title);            //Get Categorie of Post to send                       $cat=get_the_category($idPost);            $categoriePost=array();            if(count($cat)>0)            {                foreach ($cat as $categorie) {                    $categoriePost[]=$categorie->cat_ID;                }            }                        if(count($categoriePost)>0)            $categorie=  implode(",", $categoriePost);        else {            $categorie="";        }            //echo "<pre>";            $data = array(                "WpID" => $idPost,                "post_title" => $post->post_title,                "post_content" => "",                "guid" => get_permalink( $idPost ),                "post_date" => $post->post_date,                "categorie"=>  $categorie,                "image" => ''            );            $liste[]=$data;             }   }    }   catch (Exception $exc) {         sop_put_in_log("GetAllPosts",$exc->getMessage()."\n =>".$exc->getTraceAsString());    }         return $liste;                    //print_r($post);                    //$datePost = new DateTime($post['post_date']);                     //$datePost->add(new DateInterval('P60D'));                     //$toda = new DateTime();                     //if($datePost>$toda)}function sop_myplugin_activate() {    try{    $archive=sop_getAllPosts();    sop_wsClient("activation", array("archive"=>$archive));    }   catch (Exception $exc) {         sop_put_in_log("sop_myplugin_activate",$exc->getMessage()."\n =>".$exc->getTraceAsString());    }}function sop_myplugin_desactivate() {    try{            $archive=sop_getAllPosts();    sop_wsClient("desactivation", array());    }   catch (Exception $exc) {         sop_put_in_log("sop_myplugin_activate",$exc->getMessage()."\n =>".$exc->getTraceAsString());    }}function sop_put_in_log($action, $error){    return;    try    {    $fp=fopen(__DIR__."/log/error.txt", "a");    fputs($fp, "\n");     fputs($fp, "$action:$error");    fclose($fp);    } catch ( Exception $e) {     //echo $e->getMessage(); }}    function sop_print_categoriescheckbox_by_parent_id($parentId,$ListExcludedCategory){    $wp_categories=get_categories();    if(count($wp_categories)>0)    {        foreach($wp_categories as $category)            if($category->parent==$parentId)            {                ?>                    <div style="padding-left: 30px"><br>                        <input onclick="updateListeCategorie(id)"   <?php if(in_array($category->term_id, $ListExcludedCategory)) echo "checked='checked'"; ?> value="<?php echo $category->term_id; ?>" id="<?php echo $category->term_id; ?>" class="child<?php echo $parentId; ?>" type="checkbox" type="text" name="category<?php echo $category->term_id; ?>">                         <?php echo $category->name; ?>                                            <?php sop_print_categoriescheckbox_by_parent_id($category->term_id,$ListExcludedCategory) ?>                      </div>                    <?php                            }    }}function sop_check_sop_update($transient)    {        if (empty($transient->checked)) {            return $transient;        }        // Get the remote version        $remote_version="";        $request = wp_remote_post(sop_update_url, array('body' => array('action' => 'version')));        if (!is_wp_error($request) || wp_remote_retrieve_response_code($request) === 200) {            $remote_version=$request['body'];        }                if(!$remote_version)            return $transient;        // If a newer version is available, add the update        if (sop_current_vesrion < $remote_version) {            $obj = new stdClass();            $obj->slug = sop_slug;            $obj->new_version = $remote_version;            $obj->url = sop_update_url;            $obj->package = sop_update_package;            $transient->response[sop_slug] = $obj;        }        return $transient;    }     /**     * Add our self-hosted description to the filter     *     * @param boolean $false     * @param array $action     * @param object $arg     * @return bool|object     */        function sop_check_sop_version_info($false, $action, $arg)    {        if ($arg->slug === sop_slug) {            $request = wp_remote_post(sop_update_url, array('body' => array('action' => 'info')));        if (!is_wp_error($request) || wp_remote_retrieve_response_code($request) === 200)            return unserialize($request['body']);        }        return false;    }?>